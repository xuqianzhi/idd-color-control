{"version":3,"sources":["logo.svg","Display.jsx","App.js","reportWebVitals.js","index.js"],"names":["Display","props","state","displayingColor","colorRGB","isFlashing","handleInputChange","bind","timeoutIDs","this","setState","isHexColor","forEach","id","clearTimeout","i","setTimeout","push","event","target","value","hex","length","isNaN","Number","screenWidth","window","innerWidth","screenHeight","innerHeight","style","display","justifyContent","flexDirection","margin","width","height","onChange","type","placeholder","onClick","setColor","toggleFlash","toggleDisplayColor","color","position","top","left","backgroundColor","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdd574d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component, version } from 'react';\n\nexport default class Display extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            displayingColor: false,\n            colorRGB: \"ff0000\",\n            isFlashing: false,\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.timeoutIDs = [];\n    }\n\n    setColor(colorRGB) {\n        this.setState({ colorRGB: colorRGB })\n    }\n\n    toggleDisplayColor() {\n        if (!this.isHexColor(this.state.colorRGB)) {\n            this.setState({ colorRGB: \"Invalid RGB code\" })\n            return\n        }\n        const displayingColor = this.state.displayingColor;\n        const isFlashing = this.state.isFlashing;\n        const colorRGB = this.state.colorRGB;\n        this.setState({ displayingColor: !displayingColor })\n        if (!displayingColor) {\n            // transition to color page\n            if (isFlashing) {\n                // flash 20 times\n                for (let i = 0; i < 40; i++) {\n                    const id = setTimeout(() => {\n                        if (i % 2 == 0) {\n                            this.setState({ colorRGB: colorRGB })\n                        } else {\n                            this.setState({ colorRGB: \"000000\" })\n                        }\n                    }, i * 1000);\n                    this.timeoutIDs.push(id);\n                }\n            }\n        } else {\n            // transition to control page\n            this.timeoutIDs.forEach(id => {\n                clearTimeout(id)\n            })\n        }\n    }\n\n    toggleFlash() {\n        const isFlashing = this.state.isFlashing;\n        this.setState({ isFlashing: !isFlashing })\n    }\n\n    handleInputChange(event) {\n        this.setState({ colorRGB: event.target.value });\n    }\n\n    isHexColor(hex) {\n        return typeof hex === 'string'\n            && hex.length === 6\n            && !isNaN(Number('0x' + hex))\n    }\n\n    render() {\n        const displayingColor = this.state.displayingColor\n        const colorRGB = this.state.colorRGB\n        const screenWidth = window.innerWidth\n        const screenHeight = window.innerHeight\n        return (\n            <div>\n                <div id=\"control\" style={displayingColor ? { display: 'none' } : { display: 'flex', justifyContent: 'center' }}>\n                    <div style={{ display: 'flex', flexDirection: 'column' }}>\n                        <div style={{ margin: '20px', width: '400px', height: '50px' }}>\n                            Display Color: {this.state.colorRGB}\n                        </div>\n                        <div style={{ margin: '20px', width: '400px', height: '50px' }}>\n                            Will Flash: {this.state.isFlashing ? \"Yes\" : \"No\"}\n                        </div>\n                        <input onChange={this.handleInputChange} type='text' placeholder='Enter RGB' style={{ width: '400px', height: '50px' }}></input>\n                        <button onClick={() => this.setColor(\"ff0000\")} style={{ margin: '20px' }}>Red</button>\n                        <button onClick={() => this.setColor(\"FFA500\")} style={{ margin: '20px' }}>Orange</button>\n                        <button onClick={() => this.setColor(\"00FF00\")} style={{ margin: '20px' }}>Green</button>\n                        <button onClick={() => this.setColor(\"FFFF00\")} style={{ margin: '20px' }}>Yellow</button>\n                        <button onClick={() => this.setColor(\"0000FF\")} style={{ margin: '20px' }}>Blue</button>\n                        <button onClick={() => this.toggleFlash()} style={{ margin: '20px', width: '400px', height: '50px' }}>Toggle Flash</button>\n                        <button onClick={() => this.toggleDisplayColor()} style={{ margin: '20px', width: '400px', height: '50px', color: 'green' }}>Display!</button>\n                    </div>\n                </div>\n                <div id=\"color\" style={displayingColor ? {\n                    display: 'inline-block', width: screenWidth,\n                    height: screenHeight, position: 'absolute', top: '0px', left: '0px'\n                } : { display: 'none' }}>\n                    <button style={{ position: 'absolute', width: '100%', height: screenWidth, left: '0px', top: '0px', backgroundColor: `#${colorRGB}` }}\n                        onClick={() => this.toggleDisplayColor()}>\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}","import logo from './logo.svg';\nimport './App.css';\nimport Display from './Display';\n\nfunction App() {\n  return (\n    <Display></Display>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}